@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JS;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td><button @onclick="@(() => {RemoveTemperatureReading(forecast);})">Remove</button></td>
                </tr>
            }
            <tr>
                <td>
                    <input @bind="userDate" required /> Date for registration
                </td>
                <td>
                    <input @bind="userTemperatureC" required /> Temp in Celsius
                </td>
                <td>
                    <input @bind="userSummary" required /> Summary
                </td>
                <td><button @onclick="AddTemperatureReading">Save inputs</button></td>
            </tr>
        </tbody>
    </table>
    <canvas id="graph-canvas-1"></canvas>
}

@code {
    private List<WeatherForecast> forecasts;
    private DateTime userDate;
    private int userTemperatureC;
    private int userTemperatureF => 32 + (int)(userTemperatureC / 0.5556);
    private string userSummary;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json")).ToList();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            var chart = new
            {
                Type = "line",
                Data = new
                {
                    Labels = forecasts.Select(f => f.Date.ToShortDateString()),
                    Datasets = new[]
                    {new {
                label = "Temperatures (Celsius)",
                backgroundColor = "rgb(252, 226, 5)",
                borderColor = "rgb(204, 119, 34)",
                Data = forecasts.Select(f => f.TemperatureC)
            },
                        new {
label = "Temperatures (Fahrenheit)",
backgroundColor = "rgb(11, 102, 35)",
borderColor = "rgb(0, 78, 56)",
Data = forecasts.Select(f => f.TemperatureF)
}
                    }
                }
            };
            await JS.InvokeAsync<string>("CreateGraph", "graph-canvas-1", chart);
        }

    }

    private void AddTemperatureReading()
    {
        var newForcast = new WeatherForecast
        {
            Date = userDate,
            Summary = userSummary,
            TemperatureC = userTemperatureC
        };

        forecasts.Add(newForcast);

        userDate = DateTime.Now;
        userSummary = "";
        userTemperatureC = 0;
    }

    private void RemoveTemperatureReading(WeatherForecast item)
    {
        forecasts.Remove(item);
    }

}
